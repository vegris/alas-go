// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDevice = `-- name: CreateDevice :one
INSERT INTO devices (device_id, source, external_device_id, metadata)
VALUES ($1, $2, $3, $4)
RETURNING device_id, source, external_device_id, metadata, inserted_at, updated_at
`

type CreateDeviceParams struct {
	DeviceID         pgtype.UUID
	Source           string
	ExternalDeviceID pgtype.UUID
	Metadata         []byte
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, createDevice,
		arg.DeviceID,
		arg.Source,
		arg.ExternalDeviceID,
		arg.Metadata,
	)
	var i Device
	err := row.Scan(
		&i.DeviceID,
		&i.Source,
		&i.ExternalDeviceID,
		&i.Metadata,
		&i.InsertedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (session_id, device_id, ends_at)
VALUES ($1, $2, CURRENT_TIMESTAMP + MAKE_INTERVAL(secs => $3::bigint))
RETURNING session_id, device_id, ends_at, inserted_at, updated_at
`

type CreateSessionParams struct {
	SessionID       pgtype.UUID
	DeviceID        pgtype.UUID
	SessionDuration int64
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession, arg.SessionID, arg.DeviceID, arg.SessionDuration)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.DeviceID,
		&i.EndsAt,
		&i.InsertedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAliveSession = `-- name: GetAliveSession :one
SELECT session_id, device_id, ends_at, inserted_at, updated_at FROM sessions
WHERE session_id = $1 AND ends_at < CURRENT_TIMESTAMP
`

func (q *Queries) GetAliveSession(ctx context.Context, sessionID pgtype.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getAliveSession, sessionID)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.DeviceID,
		&i.EndsAt,
		&i.InsertedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDeviceByExternalDeviceID = `-- name: GetDeviceByExternalDeviceID :one
SELECT device_id, source, external_device_id, metadata, inserted_at, updated_at from devices
WHERE external_device_id = $1
`

func (q *Queries) GetDeviceByExternalDeviceID(ctx context.Context, externalDeviceID pgtype.UUID) (Device, error) {
	row := q.db.QueryRow(ctx, getDeviceByExternalDeviceID, externalDeviceID)
	var i Device
	err := row.Scan(
		&i.DeviceID,
		&i.Source,
		&i.ExternalDeviceID,
		&i.Metadata,
		&i.InsertedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const refreshSession = `-- name: RefreshSession :one
UPDATE sessions
SET ends_at = CURRENT_TIMESTAMP + MAKE_INTERVAL(secs => $2::bigint), updated_at = CURRENT_TIMESTAMP
WHERE session_id = $1
RETURNING session_id, device_id, ends_at, inserted_at, updated_at
`

type RefreshSessionParams struct {
	SessionID       pgtype.UUID
	SessionDuration int64
}

func (q *Queries) RefreshSession(ctx context.Context, arg RefreshSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, refreshSession, arg.SessionID, arg.SessionDuration)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.DeviceID,
		&i.EndsAt,
		&i.InsertedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const removeStaleSessions = `-- name: RemoveStaleSessions :exec
DELETE FROM sessions
WHERE ends_at <= CURRENT_TIMESTAMP - MAKE_INTERVAL(days => $1)
`

func (q *Queries) RemoveStaleSessions(ctx context.Context, days int32) error {
	_, err := q.db.Exec(ctx, removeStaleSessions, days)
	return err
}
